{"ast":null,"code":"var _jsxFileName = \"/Users/jayprox/Documents/projects/react-projects/router-tic-tac-toe-rps-project/router-tic-tac-toe-rps/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Square from \"./Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const initialBoard = Array(9).fill(null);\n  const [squares, setSquares] = useState(initialBoard);\n  const [isX, setIsX] = useState(true); // True for player turn, false for computer turn\n  const [gameOver, setGameOver] = useState(false);\n  function handleClick(i) {\n    if (gameOver || squares[i]) return;\n    const nextSquares = [...squares];\n    nextSquares[i] = \"X\"; // Human is always \"X\"\n    setSquares(nextSquares);\n    setIsX(false); // Switch to computer's turn\n  }\n  function computerPick() {\n    if (gameOver) return;\n    const emptySquares = squares.map((value, index) => value === null ? index : null).filter(index => index !== null);\n\n    // Check for winning move\n    for (let index of emptySquares) {\n      const testBoard = [...squares];\n      testBoard[index] = \"O\"; // Assume computer places \"O\"\n      if (calculateWinner(testBoard) === \"O\") {\n        setSquares(testBoard);\n        setIsX(true); // Switch to player's turn\n        return;\n      }\n    }\n\n    // Check for blocking move\n    for (let index of emptySquares) {\n      const testBoard = [...squares];\n      testBoard[index] = \"X\"; // Assume player places \"X\"\n      if (calculateWinner(testBoard) === \"X\") {\n        const newBoard = [...squares];\n        newBoard[index] = \"O\"; // Block the player's winning move\n        setSquares(newBoard);\n        setIsX(true); // Switch to player's turn\n        return;\n      }\n    }\n\n    // Otherwise, pick a random move\n    if (emptySquares.length > 0) {\n      const randomIndex = emptySquares[Math.floor(Math.random() * emptySquares.length)];\n      const newBoard = [...squares];\n      newBoard[randomIndex] = \"O\";\n      setSquares(newBoard);\n      setIsX(true); // Switch to player's turn\n    }\n  }\n  function calculateWinner(squares) {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let [a, b, c] of winningCombos) {\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  useEffect(() => {\n    const winner = calculateWinner(squares);\n    if (winner) {\n      setGameOver(true);\n      return;\n    }\n    if (!squares.includes(null)) {\n      // Game is a draw\n      setGameOver(true);\n      return;\n    }\n\n    // If it's the computer's turn, make a move\n    if (!isX && !gameOver) {\n      const timeoutId = setTimeout(() => {\n        computerPick();\n      }, 500); // Delay for better user experience\n      return () => clearTimeout(timeoutId); // Cleanup timeout\n    }\n  }, [squares, isX, gameOver]);\n  function handleReset() {\n    setSquares(initialBoard);\n    setIsX(true);\n    setGameOver(false);\n  }\n  let result, resultClass;\n  const winner = calculateWinner(squares);\n  let status = \"Next player: \" + (isX ? \"X\" : \"O\");\n  if (winner) {\n    status = `Winner: ${winner}`;\n    if (winner === 'X') {\n      result = 'YOU WIN!';\n      resultClass = 'win';\n    } else {\n      result = 'You lost...';\n      resultClass = 'lose';\n    }\n  } else if (!squares.includes(null)) {\n    status = \"It's a draw\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [squares.map((value, i) => /*#__PURE__*/_jsxDEV(Square, {\n      value: value,\n      onClick: () => isX ? handleClick(i) : null\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result ${resultClass}`,\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: handleReset,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"8Q+dEr8xFBY69dGnkxQots0X1I4=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Square","jsxDEV","_jsxDEV","Board","_s","initialBoard","Array","fill","squares","setSquares","isX","setIsX","gameOver","setGameOver","handleClick","i","nextSquares","computerPick","emptySquares","map","value","index","filter","testBoard","calculateWinner","newBoard","length","randomIndex","Math","floor","random","winningCombos","a","b","c","winner","includes","timeoutId","setTimeout","clearTimeout","handleReset","result","resultClass","status","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jayprox/Documents/projects/react-projects/router-tic-tac-toe-rps-project/router-tic-tac-toe-rps/src/components/Board.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Square from \"./Square\";\n\nexport default function Board() {\n  const initialBoard = Array(9).fill(null);\n\n  const [squares, setSquares] = useState(initialBoard);\n  const [isX, setIsX] = useState(true); // True for player turn, false for computer turn\n  const [gameOver, setGameOver] = useState(false);\n\n  function handleClick(i) {\n    if (gameOver || squares[i]) return;\n\n    const nextSquares = [...squares];\n    nextSquares[i] = \"X\"; // Human is always \"X\"\n    setSquares(nextSquares);\n    setIsX(false); // Switch to computer's turn\n  }\n\n  function computerPick() {\n    if (gameOver) return;\n\n    const emptySquares = squares\n      .map((value, index) => (value === null ? index : null))\n      .filter((index) => index !== null);\n  \n    // Check for winning move\n    for (let index of emptySquares) {\n      const testBoard = [...squares];\n      testBoard[index] = \"O\"; // Assume computer places \"O\"\n      if (calculateWinner(testBoard) === \"O\") {\n        setSquares(testBoard);\n        setIsX(true); // Switch to player's turn\n        return;\n      }\n    }\n  \n    // Check for blocking move\n    for (let index of emptySquares) {\n      const testBoard = [...squares];\n      testBoard[index] = \"X\"; // Assume player places \"X\"\n      if (calculateWinner(testBoard) === \"X\") {\n        const newBoard = [...squares];\n        newBoard[index] = \"O\"; // Block the player's winning move\n        setSquares(newBoard);\n        setIsX(true); // Switch to player's turn\n        return;\n      }\n    }\n  \n    // Otherwise, pick a random move\n    if (emptySquares.length > 0) {\n      const randomIndex = emptySquares[Math.floor(Math.random() * emptySquares.length)];\n      const newBoard = [...squares];\n      newBoard[randomIndex] = \"O\";\n      setSquares(newBoard);\n      setIsX(true); // Switch to player's turn\n    }\n  }\n\n  function calculateWinner(squares) {\n    const winningCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let [a, b, c] of winningCombos) {\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  useEffect(() => {\n    const winner = calculateWinner(squares);\n    if (winner) {\n      setGameOver(true);\n      return;\n    }\n\n    if (!squares.includes(null)) {\n      // Game is a draw\n      setGameOver(true);\n      return;\n    }\n\n    // If it's the computer's turn, make a move\n    if (!isX && !gameOver) {\n      const timeoutId = setTimeout(() => {\n        computerPick();\n      }, 500); // Delay for better user experience\n      return () => clearTimeout(timeoutId); // Cleanup timeout\n    }\n  }, [squares, isX, gameOver]);\n\n  function handleReset() {\n    setSquares(initialBoard);\n    setIsX(true);\n    setGameOver(false);\n  }\n\n  let result, resultClass;\n\n  const winner = calculateWinner(squares);\n  let status = \"Next player: \" + (isX ? \"X\" : \"O\");\n  if (winner) {\n    status = `Winner: ${winner}`;\n    if (winner === 'X') {\n        result = 'YOU WIN!'\n        resultClass = 'win'\n    } else {\n        result = 'You lost...'\n        resultClass = 'lose'\n    }\n  } else if (!squares.includes(null)) {\n    status = \"It's a draw\";\n  }\n\n  return (\n    <div className=\"board\">\n      {squares.map((value, i) => (\n        <Square key={i} value={value} onClick={() => (isX ? handleClick(i) : null)} />\n      ))}\n      <div className=\"message\">{status}</div>\n      <div className={`result ${resultClass}`}>{result}</div>\n      <button className=\"reset-button\" onClick={handleReset}>\n        Reset Game\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}